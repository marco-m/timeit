# https://taskfile.dev

version: '3'

vars:
  FULL_VERSION:
    sh: git describe --long --dirty --always
  SHORT_VERSION:
    sh: git describe --abbrev=0 --always
  LDFLAGS: >
    -w -s
    -X github.com/marco-m/timeit/pkg/timeit.fullVersion={{.FULL_VERSION}}
    -X github.com/marco-m/timeit/pkg/timeit.shortVersion={{.SHORT_VERSION}}

tasks:
  default:
    deps: [test]
  clean:
    desc: Delete build artifacts
    cmds: [rm -rf bin/*]
  build:
    desc: Build all the executables
    deps: [timeit, sleepit, understand-script]
  timeit:
    desc: Build the timeit executable
    dir: bin
    cmds:
      - go build -v -ldflags="{{.LDFLAGS}}" ../cmd/timeit
  sleepit:
    desc: Build the sleepit executable
    dir: bin
    cmds:
      - go build -v -ldflags="{{.LDFLAGS}}" ../cmd/sleepit
  understand-script:
    desc: Build the understand-script executable
    dir: bin
    cmds:
      - go build -v -ldflags="{{.LDFLAGS}}" ../cmd/understand-script
  test:
    desc: Run the integration tests
    cmds:
      - "{{.TESTRUNNER}} -coverprofile=bin/cover.out  ./..."
      - task: test-version
    vars:
      GOTESTSUM:
        sh: if which gotestsum > /dev/null; then echo gotestsum; fi
      TESTRUNNER: "{{if .GOTESTSUM}}{{.GOTESTSUM}} --{{else}}go test{{end}}"
  browser:
    go tool cover -html=bin/cover.out
  test-version:
    deps: [timeit]
    cmds:
      - ./bin/timeit --version | grep "  version: v0\."

  #
  # usage: env RELEASE_TAG=v0.1.0 summon task release
  #
  release:
    desc: Build a release and upload to GitHub as draft. You need to transition
      from draft to published in the web UI.
    preconditions:
      - sh: test -n "$RELEASE_TAG"
        msg: "error: missing environment variable RELEASE_TAG"
      - sh: test -z $(git status --porcelain)
        msg: "error: git dirty"
      - sh: test -z $(git status --branch --porcelain | grep ahead)
        msg: "error: git local branch ahead"
    cmds:
      # - task: unit-test
      # We create the (local) git tag now, after having ran the unit tests and
      # before building the executables, so that we can embed this information
      # in the binaries.
      # To recover: delete local tag: git tag --delete tagname
      - git tag -a {{.RELEASE_TAG}} -m ''
      - task: release-linux
      - task: release-darwin
      # - task: system-test
      - task: test
      # We create the release as a draft (that is: not visible to the public).
      # The act of "publishing" the release is left to a human from the web UI.
      - >
        github-release release
        --tag {{.RELEASE_TAG}}
        --draft
        --description
        "See the [CHANGELOG](https://github.com/$GITHUB_USER/$GITHUB_REPO/blob/{{.RELEASE_TAG}}/CHANGELOG.md)"
      # Upload the artifacts.
      - >
        github-release upload
        --tag {{.RELEASE_TAG}}
        --name timeit-linux-amd64.zip
        --file bin/linux/timeit-linux-amd64.zip
      - >
        github-release upload
        --tag {{.RELEASE_TAG}}
        --name timeit-darwin-amd64.zip
        --file bin/darwin/timeit-darwin-amd64.zip
      # We don't push the git tag. Instead, in the web UI, the act of
      # transitioning the release from draft to published will create the
      # corresponding tag in the remote repository. This is safer, because it
      # reduces the situations when one might be tempted to delete a public tag
      # due to a mistake in the release.
      - cmd: |
          echo "Draft release $RELEASE_TAG created successfully."
          echo "Remember to publish it in the GitHub web UI https://github.com/$GITHUB_USER/$GITHUB_REPO/releases"
        silent: true
    env:
      GITHUB_USER: marco-m
      GITHUB_REPO: timeit
      # GITHUB_TOKEN expected to be set securely via `summon` or equivalent
  release-linux:
    dir: bin/linux
    cmds: &release-cmds
      - go build -v -ldflags="{{.LDFLAGS}}" ../../cmd/timeit
      - zip timeit-$GOOS-$GOARCH.zip timeit
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
  release-darwin:
    dir: bin/darwin
    cmds: *release-cmds
    env:
      CGO_ENABLED: 0
      GOOS: darwin
      GOARCH: amd64
